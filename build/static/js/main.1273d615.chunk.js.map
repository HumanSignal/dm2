{"version":3,"sources":["data/config.js","utils/api-proxy.js","components/Filters.js","data/fields.js","components/FieldsMenu.js","components/Table/Table.js","components/DM.js","utils/lsf.js","components/Label.js","components/App/App.styles.js","components/App/App.js","utils/random.js","stores/FiltersStore.js","stores/TasksStore.js","stores/AppStore.js","sdk/dm.js","sdk/app.js","index.js"],"names":["APIProxy","options","gateway","endpoints","Map","commonHeaders","this","Object","entries","buildMethods","forEach","settings","methodName","createApiCallExecutor","params","a","methodSettings","getSettings","requestMethod","method","toUpperCase","apiCallURL","createUrl","path","data","request","Request","headers","assign","body","createRequestBody","fetch","rawResponse","ok","json","responseData","convert","generateError","generateException","url","URL","pathname","key","value","searchParams","set","toString","formData","FormData","append","fetchResponse","error","statusText","exception","console","message","Option","Select","DefaultColumnFilter","column","filterValue","_filterState","preFilteredRows","setFilter","count","length","allowClear","style","maxWidth","stringValue","onChange","e","update","target","undefined","placeholder","fuzzyTextFilterFn","rows","id","matchSorter","keys","row","values","filterGreaterThan","filter","autoRemove","val","formatter","Intl","DateTimeFormat","month","day","hour","minute","fields","title","accessor","filterClass","React","useMemo","min","max","Math","display","width","flex","parseInt","type","icon","CloseCircleOutlined","onClick","filterType","task_status","Set","add","map","option","i","annotations","t","completions","predictions","Cell","original","annotation_id","task_id","annotation_status","author","regions","created","format","Date","updated","labelingFields","lookup","name","FieldsMenu","observer","item","menuItem","store","f","Item","source","field","toggle","className","canToggle","checked","enabled","size","ItemGroup","fieldsSource","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","Table","columns","onSelectRow","fuzzyText","text","rowValue","String","toLowerCase","startsWith","useTable","initialState","pageSize","hiddenColumns","root","mode","dataFields","filters","c","sortBy","desc","useFilters","useSortBy","usePagination","useRowSelect","hooks","visibleColumns","push","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","cursor","slice","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","selectedRowIds","state","selectedFlatRows","preGlobalFilteredRows","setGlobalFilter","gotoPage","setPageSize","pageCount","pageIndex","listView","headerGroup","getHeaderGroupProps","getHeaderProps","render","canFilter","getRowProps","cells","cell","getCellProps","total","enableFilters","background","TabPane","Tabs","actionsMenu","DmPanel","justifyContent","marginTop","marginBottom","Group","setType","Button","BarsOutlined","AppstoreOutlined","setTarget","overlay","EyeOutlined","CaretDownOutlined","toggleFilters","FilterOutlined","disabled","setMode","PlayCircleOutlined","DmPaneMenu","href","ev","preventDefault","setRenameMode","parent","duplicateView","Divider","canClose","deleteView","DmTabPane","renameMode","onKeyPress","setTitle","trigger","DownOutlined","DmPaneContent","inject","fieldsAsColumns","viewsStore","selected","tasksStore","getAnnotationData","getData","useState","skipPageReset","DmTabs","setSelected","activeKey","onEdit","addView","all","pane","tab","closable","API_URL","Requests","window","handleResponse","res","status","wrapperRequest","credentials","then","response","fetcher","Accept","poster","patch","remover","_loadTask","ls","completionID","loadedTask","Response","setFlags","isLoading","noTask","noAccess","JSON","stringify","resetState","assignTask","initializeStore","_convertTask","cs","completionStore","addCompletionFromPrediction","addCompletion","userGenerate","selectCompletion","onTaskLoad","task","err","loadNext","loadTask","taskID","tc","pk","createdAgo","created_ago","createdBy","created_username","leadTime","lead_time","tp","created_by","user","firstName","lastName","interfaces","DmLabel","config","_config","runLS","_mode","useCallback","setTask","LabelStudio","setTimeout","elid","cbs","cbCall","apply","_prepData","includeId","completion","loadedDate","result","serializeCompletion","addHistory","completion_id","taskHistoryIds","taskHistoryCurrent","LS","onSubmitCompletion","httpres","updatePersonalKey","created_at","_convertCompletionBack","onUpdateCompletion","onDeleteCompletion","onSkipTask","loading","onGroundTruth","honeypot","onLabelStudioLoad","onPrevButton","initHistory","sdk","prev","_sdk","LSF","buildLSFCallbacks","rel","marginRight","Styles","styled","div","App","app","guidGenerator","lgth","uniqueID","nanoid","StringFilter","types","model","string","views","self","actions","NumberFilter","numValue","number","BetweenNumberFilter","startNum","endNum","val1","val2","getTask","cidx","findIndex","splice","setData","getDataFields","flat","Field","optional","enumeration","filterState","maybeNull","union","eager","View","identifier","array","getRoot","getParent","includes","cols","disableFilters","afterAttach","hasDataFields","create","ViewsStore","safeReference","view","needsNewSelected","destroy","dupView","getSnapshot","newView","afterCreate","TasksStore","DataManager","api","lsf","dataManager","initApp","rootNode","appStore","AppStore","process","DM","component","ReactDOM","createApp"],"mappings":"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","file":"static/js/main.1273d615.chunk.js","sourcesContent":["export default `\n  <View>\n    <Choices name=\"mytext_class\" toName=\"twitter-txt\">\n      <Choice value=\"positive\" />\n      <Choice value=\"netural\" />\n      <Choice value=\"negative\" />\n    </Choices>\n    <Text name=\"twitter-txt\" value=\"$text\" />\n  </View>\n`;","/**\n * @template T\n * @typedef {{[key: string]: T}} Dict<T>\n * @typedef {\"get\"|\"post\"|\"patch\"|\"delete\"} RequestMethod\n * @typedef {(response: Dict) => Dict} ResponseConverter\n * @typedef {string | {\n * path: string,\n * method: RequestMethod,\n * convert: ResponseConverter,\n * body: Dict,\n * headers: Headers,\n * }} EndpointConfig\n * @typedef {Map<string, EndpointConfig>} Endpoints\n * @typedef {{\n * gateway: string,\n * endpoints: Endpoints,\n * commonHeaders: Dict<string>,\n * }} APIProxyOptions\n */\n\n/**\n * Proxy layer for any type of API's\n */\nexport class APIProxy {\n\n  /** @type {string} */\n  gateway = null;\n\n  /** @type {Endpoints} */\n  endpoints = new Map();\n\n  /** @type {Dict<string>} */\n  commonHeaders = {};\n\n  /**\n   * Constructor\n   * @param {APIProxyOptions} options\n   */\n  constructor(options) {\n    this.commonHeaders = options.commonHeaders ?? {};\n    this.gateway = options.gateway;\n    this.endpoints = new Map(Object.entries(options.endpoints));\n\n    this.buildMethods()\n  }\n\n  /**\n   * Build methods list from endpoints\n   * @private\n   */\n  buildMethods() {\n    this.endpoints.forEach((settings, methodName) => {\n      this[methodName] = this.createApiCallExecutor(settings);\n    })\n  }\n\n  /**\n   * Actual API call\n   * @param {EndpointConfig} settings\n   * @private\n   */\n  createApiCallExecutor(settings) {\n    return async (params) => {\n      try {\n        const methodSettings = this.getSettings(settings);\n        const requestMethod = (methodSettings.method ?? \"get\").toUpperCase();\n        const apiCallURL = this.createUrl(methodSettings.path, params.data);\n\n        const request = new Request({\n          method: requestMethod,\n          headers: Object.assign({}, methodSettings.headers ?? {}),\n        })\n\n        if (requestMethod !== 'GET') {\n          request.body = this.createRequestBody(params.body)\n        }\n\n        const rawResponse = await fetch(apiCallURL, request);\n\n        if (rawResponse.ok) {\n          const responseData = await rawResponse.json();\n          return methodSettings.convert?.(responseData) ?? responseData;\n        } else {\n          return this.generateError(rawResponse);\n        }\n      } catch (exception) {\n        return this.generateException(exception);\n      }\n    }\n  }\n\n  /**\n   * Retrieve method-specific settings\n   * @private\n   * @param {EndpointConfig} settings\n   * @returns {EndpointConfig}\n   */\n  getSettings(settings) {\n    if (typeof settings === 'string') {\n      return {\n        path: settings,\n        method: 'get',\n      }\n    }\n\n    return settings\n  }\n\n  /**\n   * Creates a URL from gateway + endpoint path + params\n   * @param {string} path\n   * @param {Dict} data\n   * @private\n   */\n  createUrl(path, data = {}) {\n    const url = new URL(this.gateway);\n    url.pathname = path\n\n    if (data && typeof data === 'object') {\n      Object.entries(data).forEach(([key, value]) => {\n        url.searchParams.set(key, value)\n      })\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Create FormData object from raw JS object\n   * @private\n   * @param {Dict} body\n   */\n  createRequestBody(body) {\n    const formData = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      formData.append(key, value);\n    })\n\n    return formData;\n  }\n\n  /**\n   * Generates an error from a Response object\n   * @param {Response} fetchResponse\n   * @private\n   */\n  generateError(fetchResponse) {\n    return { error: fetchResponse.statusText }\n  }\n\n  /**\n   * Generates an error from a caught exception\n   * @param {Error} exception\n   * @private\n   */\n  generateException (exception) {\n    console.error(exception);\n    return { error: exception.message }\n  }\n}\n","\nimport React from 'react';\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\nimport { Button, Slider, Input, Select } from 'antd';\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter';\n\nconst { Option } = Select;\n\n// Define a default UI for filtering\n// function GlobalFilter({\n//   preGlobalFilteredRows,\n//   globalFilter,\n//   setGlobalFilter,\n// }) {\n//     const count = preGlobalFilteredRows.length;\n//     const [value, setValue] = React.useState(globalFilter);\n//     const onChange = useAsyncDebounce(value => {\n//         setGlobalFilter(value || undefined);\n//     }, 200);\n\n//   return (\n//     <span>\n//       Search:{' '}\n//       <input\n//         value={value || \"\"}\n//         onChange={e => {\n//           setValue(e.target.value);\n//           onChange(e.target.value);\n//         }}\n//         placeholder={`${count} records...`}\n//         style={{\n//           fontSize: '1.1rem',\n//           border: '0',\n//         }}\n//       />\n//     </span>\n//   );\n// }\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, _filterState, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length;\n\n  return (\n    <Input\n      allowClear\n      style={{ maxWidth: \"300px\" }}\n      value={filterValue || _filterState.stringValue || ''}\n      onChange={e => {\n          _filterState.update(e.target.value);\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n    column: { filterValue, _filterState, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n      const options = new Set();\n    preFilteredRows.forEach(row => {\n        options.add(row.values[id]);\n    });\n      return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      style={{ width: \"100%\", maxWidth: \"300px\" }}\n      value={filterValue || _filterState.stringValue}\n      onChange={value => {\n          _filterState.update(value);\n          setFilter(value || undefined);\n      }}\n    >\n      <Option value=\"\">All</Option>\n      {options.map((option, i) => (\n        <Option key={i} value={option}>\n          {option}\n        </Option>\n      ))}\n    </Select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n    column: { filterValue, _filterState, setFilter, preFilteredRows, id },\n    }) {\n  // Calculate the min and max\n  // using the preFilteredRows\n    \n  const [min, max] = React.useMemo(() => {\n      let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n      let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n        min = Math.min(row.values[id], min);\n        max = Math.max(row.values[id], max);\n    });\n      return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div style={{ display: \"flex\", width: \"100%\" }}>\n      <Slider\n        style={{ flex: \"auto 1 0\" }}\n        min={min}\n        max={max}\n        value={filterValue || _filterState.value || min}\n        onChange={value => {\n            const val = parseInt(value, 10);\n            _filterState.update(val);\n            setFilter(val);\n        }}\n      />\n      <Button\n        type=\"text\"\n        icon={<CloseCircleOutlined />}\n        onClick={() => { _filterState.update(min); setFilter(min)}}\n      />\n    </div>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n    column: { filterValue = [], _filterState, preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n      let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n      let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n        min = Math.min(row.values[id], min);\n        max = Math.max(row.values[id], max);\n    });\n      return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <input\n        value={filterValue[0] || _filterState.startNum || ''}\n        type=\"number\"\n        onChange={e => {\n            const val = e.target.value;\n            const num = parseInt(val, 10);\n            \n            _filterState.update([num, null]);\n            setFilter((old = []) => [val ? num : undefined, old[1]]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '70px',\n          marginRight: '0.5rem',\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || _filterState.endNum || ''}\n        type=\"number\"\n        onChange={e => {\n            const val = e.target.value;\n            const num = parseInt(val, 10);\n\n            _filterState.update([null, num]);\n            setFilter((old = []) => [old[0], val ? num : undefined]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '70px',\n          marginLeft: '0.5rem',\n        }}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val;\n\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n      const rowValue = row.values[id];\n      return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';\n\n\nexport {\n    // GlobalFilter,\n    DefaultColumnFilter,\n    SelectColumnFilter,\n    SliderColumnFilter,\n    NumberRangeColumnFilter,\n    fuzzyTextFilterFn,\n    filterGreaterThan\n};\n","\nimport {\n    DefaultColumnFilter,\n    SelectColumnFilter,\n    SliderColumnFilter,\n    NumberRangeColumnFilter,\n    fuzzyTextFilterFn,\n    filterGreaterThan\n} from \"../components/Filters\";\n\nconst formatter = new Intl.DateTimeFormat(undefined, { month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' });\n\nconst fields = {\n    // tasks related fields\n    id: { title: \"ID\",\n          accessor: 'id',\n          filterClass: SliderColumnFilter,\n          filterType: filterGreaterThan\n        },\n    task_status: {\n        id: \"status\",\n        title: \"Status\",\n        accessor: () => \"\",\n        filterClass: SelectColumnFilter,\n        filterType: 'includes'\n    },\n    annotations: {\n        id: 'annotations',\n        title: \"Annotations\",\n        accessor: t => t.completions ? t.completions.length + t.predictions.length : 0,\n        Cell: ({ row: { original } }) => original.completions ? `${original.completions.length} / ${original.predictions.length}` : ``,\n    },\n\n    // annotations related fields\n    annotation_id: { title: \"ID\", accessor: 'annotation_id' },\n    task_id: { title: \"Task\", accessor: 'task_id' },\n    annotation_status: { title: \"Status\" },\n    author: { title: \"Author\" },\n    regions: { title: \"Regions #\", accessor: 'result.length' },\n    \n    // general fields\n    created: { title: \"Created On\", accessor: 'created_at', Cell: ({ value }) => formatter.format(new Date(value)) },\n    updated: { title: \"Updated On\" },\n};\n\nexport const labelingFields = ['id', 'task_status'];\n\nfunction lookup(name) {\n    return (name in fields) ?\n        fields[name] :\n        {\n            id: name,\n            title: name,\n            accessor: t => t['data'][name],\n            filterClass: DefaultColumnFilter,\n            filterType: fuzzyTextFilterFn\n        } ;\n}\n\nexport default lookup;\n","import { Menu, Switch } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport fields from \"../data/fields\";\n\n\nconst FieldsMenu = observer(({ item, store }) => {\n  const menuItem = (f) => (\n    <Menu.Item key={f.source + f.field} onClick={f.toggle} className={\"fields-menu-item\"}>\n      {fields(f.field).title}\n      {f.canToggle ? <Switch checked={f.enabled} size=\"small\" /> : null}\n    </Menu.Item>\n  );\n\n  return (\n    <Menu size=\"small\" onClick={() => {}}>\n      {item.target === 'tasks' && (<Menu.ItemGroup title=\"Tasks\">\n        {item.fieldsSource(\"tasks\").map(menuItem)}\n      </Menu.ItemGroup>)}\n      {item.target === 'annotations' && (<Menu.ItemGroup title=\"Annotations\">\n        {item.fieldsSource(\"annotations\").map(menuItem)}\n      </Menu.ItemGroup>)}\n      <Menu.ItemGroup title=\"Input\">\n        {item.fieldsSource(\"inputs\").map(menuItem)}\n      </Menu.ItemGroup>\n\n      <Menu.ItemGroup title=\"v2: Results\">\n        <Menu.Item key=\"5\">class</Menu.Item>\n      </Menu.ItemGroup>\n    </Menu>\n  );\n});\n\nexport default FieldsMenu;\n","import { Pagination } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport {\n  useFilters,\n  usePagination, useRowSelect,\n\n\n  useSortBy, useTable\n} from \"react-table\";\nimport { fuzzyTextFilterFn } from \"../Filters\";\n\n\n\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    );\n  }\n);\n\nconst Table = observer(({ columns, data, item, onSelectRow }) => {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    state,\n    visibleColumns,\n    selectedFlatRows,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: { selectedRowIds },\n\n    gotoPage,\n    setPageSize,\n    pageCount,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        pageSize: 20,\n        hiddenColumns: item.root.mode === \"dm\" ? [] : item.dataFields,\n        filters: columns\n          .filter(c => c._filterState)\n          .map(c => ({ id: c.id || c.accessor, value: c._filterState.value })),\n        sortBy: [{ id: 'id', desc: false }],\n      },\n    },\n    useFilters, // useFilters!\n    // maybe?\n    // useGlobalFilter, // useGlobalFilter!\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => [\n        // Let's make a column for selection\n        {\n          ...columns[0],\n          // id: \"selection\",\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <div>\n              { item.root.mode === \"dm\" ? <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} /> : null } ID\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row, value }) => (\n            <div>\n              {item.root.mode === \"dm\"\n                ? <><IndeterminateCheckbox {...row.getToggleRowSelectedProps()} /> {value}</>\n                : <span style={{ cursor: 'pointer' }} onClick={() => onSelectRow && onSelectRow(row.original)}>{value}</span>\n              }\n            </div>\n          ),\n        },\n        ...columns.slice(1),\n      ]);\n    }\n  );\n\n    const gridView = () => {\n        return (\n            <>\n              { item.enableFilters === true ?\n                <div>\n                  {headerGroups.map((headerGroup) => (\n                      <div\n                        {...headerGroup.getHeaderGroupProps()}\n                        style={{ background: \"#ccc\" }}\n                      >\n                        {headerGroup.headers.map((column) => (\n                            <div {...column.getHeaderProps()}>\n                              {column.render(\"Header\")}\n                              <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                            </div>\n                        ))}\n                      </div>\n                  ))}\n\n                </div> : null\n              }\n\n              <div className=\"grid\">\n                {page.map((row, i) => {\n                    prepareRow(row);\n                    return (\n                        <div {...row.getRowProps()}>\n                          {row.cells.map((cell) => {\n                              return (\n                                  <div {...cell.getCellProps()}>{cell.render(\"Cell\")}</div>\n                              );\n                          })}\n                        </div>\n                    );\n                })}\n              </div>\n            </>\n        );\n    };\n\n    const listView = () => {\n      return (\n        <>\n          <table {...getTableProps()} style={{ width: \"100%\" }}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr\n                  {...headerGroup.getHeaderGroupProps()}\n                >\n                  {headerGroup.headers.map((column) => (\n                    <th {...column.getHeaderProps()}>\n                      {column.render(\"Header\")}\n                      <div>{column.canFilter && item.root.mode === \"dm\" ? column.render(\"Filter\") : null}</div>\n                      {/* this is resize the column code which we may need  */}\n                      {/* <div */}\n                      {/*   {...column.getResizerProps()} */}\n                      {/*   className={`resizer ${column.isResizing ? \"isResizing\" : \"\"}`} */}\n                      {/* /> */}\n                    </th>\n                  ))}\n                </tr>\n              ))}\n\n              {/* <tr> */}\n              {/*   <th colSpan={visibleColumns.length} */}\n              {/*     style={{ */}\n              {/*       textAlign: 'left', */}\n              {/*     }}> */}\n\n              {/* maybe we show that on Ctrl+f? */}\n              {/* <GlobalFilter preGlobalFilteredRows={preGlobalFilteredRows} */}\n              {/*                   globalFilter={state.globalFilter} */}\n              {/*                   setGlobalFilter={setGlobalFilter} */}\n              {/* /> */}\n              {/* </th> */}\n              {/*     </tr> */}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {page.map((row, i) => {\n                prepareRow(row);\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <Pagination\n            current={pageIndex}\n            total={pageCount * pageSize}\n            pageSize={pageSize}\n            onChange={(page, size) => { gotoPage(page); setPageSize(size); }}\n          />\n          <p>Selected Completions: {Object.keys(selectedRowIds).length}</p>\n        </>\n      );\n    };\n\n  // Render the UI for your table\n    return (item.root.mode === \"dm\") ?\n        (item.type === \"list\") ?\n          listView() :\n          gridView()\n        : listView();\n});\n\nexport default Table;\n","import {\n  AppstoreOutlined,\n  BarsOutlined,\n  CaretDownOutlined, DownOutlined,\n\n  EyeOutlined,\n  FilterOutlined, PlayCircleOutlined\n} from \"@ant-design/icons\";\nimport { Button, Dropdown, Menu, Radio, Space, Tabs } from \"antd\";\nimport { inject, observer } from \"mobx-react\";\nimport React from \"react\";\nimport FieldsMenu from \"./FieldsMenu\";\nimport Table from \"./Table/Table\";\n\n\nconst { TabPane } = Tabs;\n\nconst actionsMenu = (\n  <Menu onClick={() => {}}>\n    <Menu.Item key=\"1\">Delete</Menu.Item>\n  </Menu>\n);\n\nconst DmPanel = observer(({ item }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n      }}\n    >\n      <Space size=\"middle\">\n        <Radio.Group value={item.type} onChange={e => item.setType(e.target.value)}>\n          <Radio.Button value=\"list\"><BarsOutlined /> List</Radio.Button>\n          <Radio.Button value=\"grid\"><AppstoreOutlined /> Grid</Radio.Button>\n        </Radio.Group>\n\n        <Radio.Group value={item.target} onChange={e => item.setTarget(e.target.value)}>\n          <Radio.Button value=\"tasks\">Tasks</Radio.Button>\n          <Radio.Button value=\"annotations\">Annotations</Radio.Button>\n        </Radio.Group>\n\n        <Dropdown overlay={<FieldsMenu item={item} />}>\n          <Button>\n            <EyeOutlined /> Fields <CaretDownOutlined />\n          </Button>\n        </Dropdown>\n\n        <Button\n          type={item.enableFilters ? \"primary\" : \"\"}\n          onClick={() => item.toggleFilters()}\n        >\n          <FilterOutlined /> Filters{\" \"}\n        </Button>\n      </Space>\n\n      <Space size=\"middle\">\n        <Button disabled={item.target === 'annotations'} onClick={() => item.root.setMode('label') }>\n          <PlayCircleOutlined />\n          Label All\n        </Button>\n        <Dropdown overlay={actionsMenu}>\n          <Button>\n            Actions <CaretDownOutlined />\n          </Button>\n        </Dropdown>\n      </Space>\n    </div>\n  );\n});\n\nconst DmPaneMenu = observer(({ item }) => {\n    return (\n        <Menu>\n          <Menu.Item key=\"0\">\n            <a href=\"#rename\" onClick={(ev) => {\n                ev.preventDefault();\n                item.setRenameMode(true);\n                return false;\n            }}>Rename</a>\n          </Menu.Item>\n          <Menu.Item key=\"1\">\n            <a href=\"#duplicate\" onClick={(ev) => {\n                ev.preventDefault();\n                item.parent.duplicateView(item);\n                return false;\n            }}>Duplicate</a>\n          </Menu.Item>\n          <Menu.Divider />\n        { item.parent.canClose ? <Menu.Item key=\"2\" onClick={() => {\n              item.parent.deleteView(item);\n        }}>Close</Menu.Item> : null }\n        </Menu>\n    );\n});\n\nconst DmTabPane = observer(({ item }) => {\n  return (\n    <span>\n      {\n          item.renameMode ?\n              <input type=\"text\" value={item.title}\n                     onKeyPress={(ev) => {\n                         if (ev.key === 'Enter') {\n                             item.setRenameMode(false);\n                             return;\n                         }\n                     }}\n                     onChange={(ev) => {\n                         item.setTitle(ev.target.value);\n                     }} /> :\n              item.title\n      }\n      &nbsp;&nbsp;&nbsp;&nbsp;\n      <Dropdown overlay={<DmPaneMenu item={item} />} trigger={[\"click\"]}>\n        <a href=\"#down\" className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n          <DownOutlined />\n        </a>\n      </Dropdown>\n    </span>\n  );\n});\n\nconst DmPaneContent = inject(\"store\")(\n  observer(({ item, store }) => {\n    const columns = item.fieldsAsColumns;\n      const data = (store.viewsStore.selected.target === 'annotations') ?\n            store.tasksStore.getAnnotationData() :\n            store.tasksStore.getData() ;\n\n    const [skipPageReset, setSkipPageReset] = React.useState(false);\n\n    return (\n      <div>\n          <DmPanel item={item} />\n          <Table columns={columns} data={data} item={item} skipPageReset={skipPageReset} />\n      </div>\n    );\n  })\n);\n\n\nconst DmTabs = inject('store')(observer(({ store }) => {\n    return (\n        <Tabs\n          onChange={(key) => {\n              store.viewsStore.setSelected(key);\n          }}\n          activeKey={store.viewsStore.selected.key}\n          type=\"editable-card\"\n          onEdit={store.viewsStore.addView}\n        >\n          {store.viewsStore.all.map((pane) => (\n              <TabPane\n                tab={<DmTabPane item={pane} />}\n                key={pane.key}\n                closable={false}\n              >\n                <DmPaneContent item={pane} />\n              </TabPane>\n          ))}\n        </Tabs>\n    );\n\n}));\n\n\n//   class DmTabs extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.newTabIndex = 0;\n\n//       const store = this.props.store;\n\n//       const panes = store.viewsStore.all.map((c) => {\n//         c[\"content\"] = <DmPaneContent item={c} store={store} />;\n//         return c;\n//       });\n\n//       this.state = {\n//         activeKey: panes[0].key,\n//         panes: panes,\n//       };\n//     }\n\n//     onChange = (activeKey) => {\n//       this.setState({ activeKey });\n//     };\n\n//     onEdit = (targetKey, action) => {\n//       this[action](targetKey);\n//     };\n\n//     add = () => {\n//       const { panes } = this.state;\n//       const activeKey = `newTab${this.newTabIndex++}`;\n//       panes.push({\n//         title: \"New Tab\",\n//         content: \"Content of new Tab\",\n//         key: activeKey,\n//       });\n//       this.setState({ panes, activeKey });\n//     };\n\n//     remove = (targetKey) => {\n//       let { activeKey } = this.state;\n//       let lastIndex;\n//       this.state.panes.forEach((pane, i) => {\n//         if (pane.key === targetKey) {\n//           lastIndex = i - 1;\n//         }\n//       });\n//       const panes = this.state.panes.filter((pane) => pane.key !== targetKey);\n//       if (panes.length && activeKey === targetKey) {\n//         if (lastIndex >= 0) {\n//           activeKey = panes[lastIndex].key;\n//         } else {\n//           activeKey = panes[0].key;\n//         }\n//       }\n//       this.setState({ panes, activeKey });\n//     };\n\n//     render() {\n//       return (\n//         <Tabs\n//           tabBarStyle={{ margin: 0, height: \"40px\" }}\n//           onChange={this.onChange}\n//           activeKey={this.state.activeKey}\n//           type=\"editable-card\"\n//           onEdit={this.onEdit}\n\n//         >\n//           {this.state.panes.map((pane) => (\n//             <TabPane\n//               tab={<DmTabPane item={pane} />}\n//               key={pane.key}\n//               closable={false}\n//             >\n//               {pane.content}\n//             </TabPane>\n//           ))}\n//         </Tabs>\n//       );\n//     }\n//   }\n// ));\n\nexport default DmTabs;\n","/*\n * Label Studio Frontend SDK - inter-layer code that connects LSB server\n * implementation with the Frontend part. At the moment it's based on\n * callbacks.\n */\n\nconst API_URL = {\n  MAIN: \"api\",\n  TASKS: \"/tasks\",\n  COMPLETIONS: \"/completions\",\n  CANCEL: \"/cancel\",\n  PROJECTS: \"/projects\",\n  NEXT: \"/next/\",\n  EXPERT_INSTRUCTIONS: \"/expert_instruction\"\n};\n\nconst Requests = (function(window) {\n  const handleResponse = res => {\n    if (res.status !== 200 || res.status !== 201) {\n      return res;\n    } else {\n      return res.json();\n    }\n  };\n\n  const wrapperRequest = (url, method, headers, body) => {\n    return window\n      .fetch(url, {\n        method: method,\n        headers: headers,\n        credentials: \"include\",\n        body: body,\n      })\n      .then(response => handleResponse(response));\n  };\n\n  const fetcher = url => {\n    return wrapperRequest(url, \"GET\", { Accept: \"application/json\" });\n  };\n\n  const fetcherAuth = async (url, data) => {\n    const response = await window.fetch(url, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Basic \" + btoa(data.username + \":\" + data.password),\n      },\n      credentials: \"same-origin\",\n    });\n    return handleResponse(response);\n  };\n\n  const poster = (url, body) => {\n    return wrapperRequest(url, \"POST\", { Accept: \"application/json\", \"Content-Type\": \"application/json\" }, body);\n  };\n\n  const patch = (url, body) => {\n    return wrapperRequest(\n      url,\n      \"PATCH\",\n      {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    );\n  };\n\n  const remover = (url, body) => {\n    return wrapperRequest(\n      url,\n      \"DELETE\",\n      {\n        \"Content-Type\": \"application/json\",\n      },\n      body,\n    );\n  };\n\n  return {\n    fetcher: fetcher,\n    poster: poster,\n    patch: patch,\n    remover: remover,\n  };\n})(window);\n\nconst _loadTask = function(ls, url, completionID) {\n    try {\n        const req = Requests.fetcher(url);\n\n        req.then(function(loadedTask) {\n            if (loadedTask instanceof Response && loadedTask.status === 404) {\n                ls.setFlags({ isLoading: false, noTask: true });\n                return;\n            }\n\n            if (loadedTask instanceof Response && loadedTask.status === 403) {\n                ls.setFlags({ isLoading: false, noAccess: true });\n                return;\n            }\n\n            loadedTask.json().then(response => {\n                /**\n                 * Convert received data to string for MST support\n                 */\n                response.data = JSON.stringify(response.data);\n\n                /**\n                 * Add new data from received task\n                 */\n                ls.resetState();\n                ls.assignTask(response);\n                ls.initializeStore(_convertTask(response));\n                let cs = ls.completionStore;\n                let c;\n                if (cs.predictions.length > 0) {\n                    c = ls.completionStore.addCompletionFromPrediction(cs.predictions[0]);\n                }\n\n                // we are on history item, take completion id from history\n                else if (ls.completionStore.completions.length > 0 && completionID) {\n                    c = {id: completionID};\n                }\n\n                else {\n                    c = ls.completionStore.addCompletion({ userGenerate: true });\n                }\n\n                if (c.id) cs.selectCompletion(c.id);\n\n                ls.setFlags({ isLoading: false });\n\n                ls.onTaskLoad(ls, ls.task);\n            })\n        });\n    } catch (err) {\n        console.error(\"Failed to load next task \", err);\n    }\n};\n\nconst loadNext = function(ls) {\n  var url = `${API_URL.MAIN}${API_URL.PROJECTS}/1${API_URL.NEXT}`;\n    return _loadTask(ls, url);\n};\n\nconst loadTask = function(ls, taskID, completionID) {\n  var url = `${API_URL.MAIN}${API_URL.TASKS}/${taskID}`;\n    return _loadTask(ls, url, completionID);\n};\n\nconst _convertTask = function(task) {\n  // converts the task from the server format to the format\n  // supported by the LS frontend\n  if (!task) return;\n\n  if (task.completions) {\n    for (let tc of task.completions) {\n      tc.pk = tc.id;\n      tc.createdAgo = tc.created_ago;\n      tc.createdBy = tc.created_username;\n      tc.leadTime = tc.lead_time;\n    }\n  }\n\n  if (task.predictions) {\n    for (let tp of task.predictions) {\n      tp.pk = tp.pk;\n      tp.createdAgo = tp.created_ago;\n      tp.createdBy = tp.created_by;\n    }\n  }\n\n  return task;\n};\n\nconst _convertCompletionBack = function(c) {\n    // convert the completion back from LS to server format\n    // TODO I think we can get that info back from the server\n    if (! c) return;\n\n    return {\n        id: c.pk,\n        created_ago: c.createdAgo,\n        created_username: c.createdBy,\n        created_at: '2019-08-06T19:27:29.289566Z',\n        lead_time: c.leadTime,\n    };\n};\n\nexport default function(elid, config, task, cbs) {\n    const cbCall = function (name, ...params) {\n        if (name in cbs)\n            return cbs[name].apply(null, params);\n    };\n\n  const showHistory = task === null;  // show history buttons only if label stream mode, not for task explorer\n\n  const _prepData = function(c, includeId) {\n    var completion = {\n      lead_time: (new Date() - c.loadedDate) / 1000,  // task execution time\n      result: c.serializeCompletion()\n    };\n    if (includeId) {\n        completion.id = parseInt(c.id);\n    }\n    const body = JSON.stringify(completion);\n    return body;\n  };\n\n  function initHistory(ls) {\n      if (!ls.taskHistoryIds) {\n          ls.taskHistoryIds = [];\n          ls.taskHistoryCurrent = -1;\n      }\n  }\n  function addHistory(ls, task_id, completion_id) {\n      ls.taskHistoryIds.push({task_id: task_id, completion_id: completion_id});\n      ls.taskHistoryCurrent = ls.taskHistoryIds.length;\n  }\n\n  var LS = new window.LabelStudio(elid, {\n    config: config,\n    user: { pk: 1, firstName: \"Awesome\", lastName: \"User\" },\n\n    task: _convertTask(task),\n    interfaces: [\n      \"basic\",\n      \"panel\", // undo, redo, reset panel\n      \"controls\", // all control buttons: skip, submit, update\n      \"submit\", // submit button on controls\n      \"update\", // update button on controls\n      \"predictions\",\n      \"predictions:menu\", // right menu with prediction items\n      \"completions:menu\", // right menu with completion items\n      \"completions:add-new\",\n      \"completions:delete\",\n      \"side-column\", // entity\n      \"skip\"\n    ],\n\n    onSubmitCompletion: function(ls, c) {\n      ls.setFlags({ isLoading: true });\n      const req = Requests.poster(`${API_URL.MAIN}${API_URL.TASKS}/${ls.task.id}${API_URL.COMPLETIONS}/`, _prepData(c));\n\n      req.then(function(httpres) {\n        httpres.json().then(function(res) {\n          if (res && res.id) {\n              c.updatePersonalKey(res.id.toString());\n              cbCall('onSubmitCompletion', ls, _convertCompletionBack(c), res);\n              addHistory(ls, ls.task.id, res.id);\n          }\n\n          if (task) {\n            ls.setFlags({ isLoading: false });\n          } else {\n            loadNext(ls);\n          }\n        });\n      });\n\n      return true;\n    },\n\n    onTaskLoad: function(ls) {\n      // render back & next buttons if there are history\n      // if (showHistory && ls.taskHistoryIds && ls.taskHistoryIds.length > 0) {\n      //   var firstBlock = $('[class^=Panel_container]').children().first();\n      //   var className = firstBlock.attr('class');\n      //   var block = $('<div class=\"'+className+'\"></div>');\n      //   // prev button\n      //   block.append('<button type=\"button\" class=\"ant-btn ant-btn-ghost\" ' +\n      //                (ls.taskHistoryCurrent > 0 ? '': 'disabled') +\n      //                ' onclick=\"window.LSF_SDK._sdk.prevButtonClick()\">' +\n      //                '<i class=\"ui icon fa-angle-left\"></i> Prev</button>');\n      //   // next button\n      //   block.append('<button type=\"button\" class=\"ant-btn ant-btn-ghost\"' +\n      //                (ls.taskHistoryCurrent < ls.taskHistoryIds.length ? '': 'disabled') +\n      //                ' onclick=\"window.LSF_SDK._sdk.nextButtonClick()\">' +\n      //                'Next <i class=\"ui icon fa-angle-right\"></i></button>');\n      //   firstBlock.after(block);\n      // }\n    },\n\n    onUpdateCompletion: function(ls, c) {\n      ls.setFlags({ isLoading: true });\n\n      const req = Requests.patch(\n        `${API_URL.MAIN}${API_URL.TASKS}/${ls.task.id}${API_URL.COMPLETIONS}/${c.pk}/`,\n        _prepData(c)\n      );\n\n      req.then(function(httpres) {\n        ls.setFlags({ isLoading: false });\n          // refresh task from server\n\n          httpres.json().then(function(res) {\n              cbCall('onUpdateCompletion', ls, c, res);\n          });\n\n          loadTask(ls, ls.task.id, ls.completionStore.selected.id);\n      });\n    },\n\n    onDeleteCompletion: function(ls, c) {\n      ls.setFlags({ isLoading: true });\n\n      const req = Requests.remover(`${API_URL.MAIN}${API_URL.TASKS}/${ls.task.id}${API_URL.COMPLETIONS}/${c.pk}/`);\n        req.then(function(httpres) {\n        cbCall('onDeleteCompletion', ls, c);\n        ls.setFlags({ isLoading: false });\n      });\n    },\n\n    onSkipTask: function(ls) {\n      ls.setFlags({ loading: true });\n      var c = ls.completionStore.selected;\n      var completion = _prepData(c, true);\n\n      Requests.poster(\n        `${API_URL.MAIN}${API_URL.TASKS}/${ls.task.id}${API_URL.CANCEL}`,\n        completion\n      ).then(function(response) {\n        response.json().then(function (res) {\n          if (res && res.id) {\n            c.updatePersonalKey(res.id.toString());\n            addHistory(ls, ls.task.id, res.id);\n          }\n\n          if (task) {\n            ls.setFlags({ isLoading: false });\n            // refresh task from server\n            loadTask(ls, ls.task.id, res.id);\n          } else {\n            loadNext(ls);\n          }\n        })\n      });\n\n        cbCall('onDeleteCompletion', ls, c);\n\n      return true;\n    },\n\n    onGroundTruth: function(ls, c, value) {\n      Requests.patch(\n        `${API_URL.MAIN}${API_URL.TASKS}/${ls.task.id}${API_URL.COMPLETIONS}/${c.pk}/`,\n        JSON.stringify({ honeypot: value })\n      );\n    },\n\n    onLabelStudioLoad: function(ls) {\n      var self = ls;\n      ls.onTaskLoad = this.onTaskLoad;  // FIXME: make it inside of LSF\n      ls.onPrevButton = this.onPrevButton; // FIXME: remove it in future\n      initHistory(ls);\n\n      if (!task) {\n        ls.setFlags({ isLoading: true });\n        loadNext(ls);\n      } else {\n          if (! task || ! task.completions || task.completions.length === 0) {\n              var c = ls.completionStore.addCompletion({ userGenerate: true });\n              ls.completionStore.selectCompletion(c.id);\n          }\n      }\n    }\n  });\n\n    // TODO WIP here, we will move that code to the SDK\n    var sdk = {\n        \"loadNext\": function () { loadNext(LS) },\n        \"loadTask\": function (taskID) { loadTask(LS, taskID) },\n        'prevButtonClick': function() {\n            LS.taskHistoryCurrent--;\n            let prev = LS.taskHistoryIds[LS.taskHistoryCurrent];\n            loadTask(LS, prev.task_id, prev.completion_id);\n        },\n        'nextButtonClick': function() {\n            LS.taskHistoryCurrent++;\n            if (LS.taskHistoryCurrent < LS.taskHistoryIds.length) {\n              let prev = LS.taskHistoryIds[LS.taskHistoryCurrent];\n              loadTask(LS, prev.task_id, prev.completion_id);\n            }\n            else {\n              loadNext(LS);  // new task\n            }\n        }\n    };\n\n    LS._sdk = sdk;\n\n    return LS;\n};\n","import { Button } from \"antd\";\nimport { inject, observer } from \"mobx-react\";\nimport React from \"react\";\nimport LSF from \"../utils/lsf\";\nimport Table from \"./Table/Table\";\n\n\n\nconst user = { pk: 1, firstName: \"James\", lastName: \"Dean\" };\nconst interfaces = [\n  \"panel\",\n  \"update\",\n  \"controls\",\n  \"side-column\",\n  \"completions:menu\",\n  \"completions:add-new\",\n  \"completions:delete\",\n  \"predictions:menu\",\n];\n\nconst DmLabel = inject('store')(observer(({ store }) => {\n    const item = store.viewsStore.selected;\n    const columns = item.fieldsAsColumns;\n    const data = store.tasksStore.getData();\n    const config = store._config;\n\n    const runLS = store._mode === 'dev' ?\n          React.useCallback(task => {\n              store.tasksStore.setTask(task);\n              if (!window.LabelStudio) return setTimeout(() => runLS(task), 100);\n              new window.LabelStudio('label-studio', { config, interfaces, user, task });\n          }, [config, runLS, store.tasksStore]) :\n          React.useCallback(task => {\n              store.tasksStore.setTask(task);\n              LSF('label-studio', config, task,\n                  store.tasksStore.buildLSFCallbacks());\n          });\n\n    // const runLS = React.useCallback(task => {\n    //   if (!window.LabelStudio) return setTimeout(() => runLS(task), 100);\n    //     new window.LabelStudio('label-studio', { config, interfaces, user, task });\n    // }, []);\n\n    React.useEffect(() => runLS(data[0]), [data, runLS]);\n\n    return (\n        <div>\n          <link href=\"https://unpkg.com/label-studio@0.7.3/build/static/css/main.09b8161e.css\" rel=\"stylesheet\" />\n\n          <Button onClick={() => store.setMode('dm') }>\n            Back to Table\n          </Button>\n\n          <div style={{ display: \"flex\" }}>\n            <div style={{ flex: \"200px 0 0\", marginRight: \"1em\" }}>\n              <Table columns={columns} data={data} item={item} onSelectRow={runLS} />\n            </div>\n        <div style={{ width: \"100%\" }}>\n              <div id=\"label-studio\"></div>\n            </div>\n          </div>\n\n        </div>\n    );\n}));\n\nexport default DmLabel;\n","import styled from 'styled-components';\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  .grid {\n    display: flex;\n  }\n\n  .grid > div {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    padding: 1em;\n  }\n\n  .grid {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-gap: 1em;\n  }\n\n  table {\n    border-spacing: 0;\n    border: none;\n    margin-bottom: 1em;\n\n    thead {\n      background: #fafafa;\n    }\n\n    tr {\n      :hover td {\n        background: #fafafa;\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid #f0f0f0;\n\n      vertical-align: top;\n\n      .resizer {\n        display: inline-block;\n        background: blue;\n        width: 10px;\n        height: 100%;\n        position: absolute;\n        right: 0;\n        top: 0;\n        transform: translateX(50%);\n        z-index: 1;\n        ${'' /* prevents from scrolling while dragging on touch devices */}\n        touch-action:none;\n\n        &.isResizing {\n          background: red;\n        }\n      }\n    }\n  }\n`;\n\nexport default Styles;\n","\nimport { observer, Provider } from \"mobx-react\";\nimport React from 'react';\nimport DmTabs from '../DM';\nimport DmLabel from '../Label';\nimport Styles from './App.styles';\n\nconst App = (observer(({ app }) => {\n    return (\n        <Provider store={app}>\n          <Styles>\n            { app.mode === 'dm' ? <DmTabs /> : <DmLabel /> }\n          </Styles>\n        </Provider>\n    );\n}));\n\nexport default App;\n","\nimport { nanoid } from \"nanoid\";\n\n/**\n * Unique hash generator\n * @param {number} lgth\n */\nexport function guidGenerator(lgth) {\n  let uniqueID = nanoid(10);\n\n  if (lgth) {\n    uniqueID = nanoid(lgth);\n  }\n\n  return uniqueID;\n}\n","\nimport { types } from \"mobx-state-tree\";\n        \nconst StringFilter = types\n      .model(\"StringFilter\", {\n          stringValue: types.string\n      }).views(self => ({\n          get value() {\n              return self.stringValue;\n          }\n      }))\n\n      .actions(self => ({\n          update(val) {\n              self.stringValue = val;\n          },\n      }));\n\nconst NumberFilter = types\n      .model(\"NumberFilter\", {\n          numValue: types.number\n      }).views(self => ({\n          get value() {\n              return self.numValue;\n          }\n      }))\n      .actions(self => ({\n          update(val) {\n              self.numValue = val;\n          },\n      }));\n\nconst BetweenNumberFilter = types\n      .model(\"BetweenNumberFilter\", {\n          startNum: types.number,\n          endNum: types.number,\n      }).views(self => ({\n          get value() {\n              return [ self.startNum, self.endNum ];\n          }\n      }))\n      .actions(self => ({\n          update([val1, val2]) {\n              if (val1 !== null)\n                  self.startNum = val1;\n\n              if (val2 !== null)\n                  self.endNum = val2;\n          }\n      }));\n\nexport {\n    StringFilter,\n    NumberFilter,\n    BetweenNumberFilter\n};\n","\nimport { types } from \"mobx-state-tree\";\n        \nexport default types\n    .model(\"TasksStore\", {\n        \n    }).views(self => ({\n        buildLSFCallbacks() {\n            return {\n                onSubmitCompletion: function(ls, c, res) {\n                    const task = self.getTask();\n                    \n                    if (task) {\n                        if ('completions' in task)\n                            task.completions.push(c)\n                        else\n                            task.completions = [ c ]\n                    }\n                },\n                onTaskLoad: function(ls) {},\n                onUpdateCompletion: function(ls, c) {\n                    // TODO needs to update the update date\n                },\n                onDeleteCompletion: function(ls, c) {\n                    const task = self.getTask();\n                    if (task && task.completions) {\n                        const cidx = task.completions.findIndex(tc => tc.id === c.id);\n                        task.completions.splice(cidx, 1);\n                    }\n                },\n                onSkipTask: function(ls) {\n                    // TODO need to update the task status\n                },\n                onLabelStudioLoad: function(ls) {},\n            };\n        }\n    })).actions(self => {\n        let data = [],\n            task = null;\n        \n        function setData(val) { data = val }\n        function getData() { return data }\n        \n        function getAnnotationData() {\n            return data.map(t => {\n                return (t.completions) ?\n                    t.completions.map(c => {\n                        c['annotation_id'] = c.id;\n                        c['task_id'] = t.id;\n                        c['data'] = t.data;\n\n                        return c;\n                     }) : [];\n            }).flat();\n        }\n\n        function getDataFields() {\n            return Object.keys(data[0]['data'] || {});\n        }\n        \n        function setTask(val) { task = val }\n        function getTask() { return task }\n        \n        return {\n            setData,\n            getData,\n            getDataFields,\n            getAnnotationData,\n            setTask,\n            getTask\n        }\n    })\n","\nimport { destroy, getParent, getRoot, getSnapshot, types } from \"mobx-state-tree\";\nimport fields, { labelingFields } from \"../data/fields\";\nimport { guidGenerator } from \"../utils/random\";\nimport {\n    BetweenNumberFilter, NumberFilter, StringFilter\n} from \"./FiltersStore\";\nimport TasksStore from \"./TasksStore\";\n\nconst Field = types\n      .model(\"Fields\", {\n          field: types.string,\n\n          enabled: true,\n          canToggle: false,\n\n          source: types.optional(types.enumeration([\"tasks\", \"annotations\", \"inputs\"]), \"tasks\"),\n\n          filterState: types.maybeNull(types.union({ eager: false }, StringFilter, NumberFilter, BetweenNumberFilter))\n      }).views(self => ({\n          get key() { return self.source + \"_\" + self.field; },\n      }))\n      .actions(self => ({\n          toggle() {\n              self.enabled = !self.enabled;\n          },\n      }));\n\nconst View = types\n      .model(\"View\", {\n          id: types.optional(types.identifier, () => { return guidGenerator(5) }),\n\n          title: \"Tasks\",\n\n          type: types.optional(types.enumeration([\"list\", \"grid\"]), \"list\"),\n          target: types.optional(types.enumeration([\"tasks\", \"annotations\"]), \"tasks\"),\n\n          fields: types.array(Field),\n\n          enableFilters: false,\n          renameMode: false,\n      }).views(self => ({\n          get key() { return self.id },\n\n          get root() { return getRoot(self) },\n\n          get parent() { return getParent(getParent(self)) },\n\n          get dataFields() {\n            return self.fields.filter(f => f.source === \"inputs\").map(f => f.field);\n          },\n\n          get hasDataFields() {\n              return self.dataFields.length > 0;\n          },\n\n          fieldsSource(source) {\n              return self.fields.filter(f => f.source === source);\n          },\n\n          // get fields formatted as columns structure for react-table\n          get fieldsAsColumns() {\n              let lst\n              // if (self.root.mode === \"label\") lst = self.fields.filter(f => f.source === 'label');\n              // else\n              if (self.target === \"tasks\") lst = self.fields.filter(f => f.source !== \"annotations\");\n              else lst = self.fields.filter(f => f.source !== \"tasks\");\n\n              return lst\n                .filter(f => f.enabled && (self.root.mode !== \"label\" || labelingFields.includes(f.field) || f.source === \"inputs\"))\n                .map(f => {\n                  const field = fields(f.field);\n                  const { id, accessor, Cell, filterClass, filterType } = field;\n\n                  const cols = {\n                      Header: field.title,\n                      accessor,\n                      disableFilters: true,\n                      _filterState: f.filterState\n                  };\n\n                  if (Cell) cols.Cell = Cell;\n                  if (id) cols.id = id;\n\n                  if (self.enableFilters === true) {\n                      if (filterClass !== undefined)\n                          cols[\"Filter\"] = filterClass;\n\n                      if (filterType !== undefined)\n                          cols[\"filter\"] = filterType\n\n                      if (filterType || filterClass)\n                          cols[\"disableFilters\"] = false;\n                  }\n\n                  return cols;\n              })\n          }\n      })).actions(self => ({\n          setType(type) {\n              self.type = type;\n          },\n\n          setTarget(target) {\n              self.target = target;\n          },\n\n          setTitle(title) {\n              self.title = title;\n          },\n\n          setRenameMode(mode) {\n              self.renameMode = mode;\n          },\n\n          toggleFilters() {\n              self.enableFilters = ! self.enableFilters;\n          },\n\n          afterAttach() {\n              if (! self.hasDataFields) {\n                  // create data fields if they were not initialized\n                  const fields = self.root.tasksStore.getDataFields();\n\n                  self.fields = [\n                      ...self.fields,\n                      ...fields.map(f => {\n                          return Field.create({\n                              field: f,\n                              canToggle: true,\n                              enabled: false,\n                              source: 'inputs',\n                              filterState: { stringValue: \"\" }\n                          });\n                      })\n                  ];\n              }\n          }\n      }))\n\nconst ViewsStore = types\n      .model(\"ViewsStore\", {\n          selected: types.safeReference(View),\n          views: types.array(View),\n      }).views(self => ({\n          get all() {\n              return self.views;\n          },\n\n          get canClose() {\n              return self.all.length > 1;\n          }\n      })).actions(self => ({\n          setSelected(view) {\n              self.selected = view;\n          },\n\n          deleteView(view) {\n              let needsNewSelected = false;\n              if (self.selected === view)\n                  needsNewSelected = true;\n\n              destroy(view);\n\n              if (needsNewSelected)\n                  self.setSelected(self.views[0]);\n          },\n\n          addView() {\n              const dupView = getSnapshot(self.views[0]);\n              const newView = View.create({\n                  fields: dupView.fields\n              });\n\n              self.views.push(newView);\n              self.setSelected(newView);\n\n              return newView;\n          },\n\n          duplicateView(view) {\n              const dupView = getSnapshot(view);\n              const newView = View.create({\n                  ...dupView,\n                  id: guidGenerator(5),\n                  title: dupView.title + \" copy\"\n              });\n\n              self.views.push(newView);\n              self.setSelected(self.views[self.views.length - 1]);\n          },\n\n          afterCreate() {\n              if (! self.selected) {\n                  self.setSelected(self.views[0]);\n              }\n          }\n    }));\n\nexport default types\n    .model(\"dmAppStore\", {\n        mode: types.optional(types.enumeration([\"dm\", \"label\"]), \"dm\"),\n\n        tasksStore: types.optional(TasksStore, {}),\n\n        viewsStore: types.optional(ViewsStore, {\n            views: []\n        }),\n    }).actions(self => ({\n        setMode(mode) {\n            self.mode = mode;\n        }\n    }));\n","/**\n * @global LSF\n * @typedef {import(\"../utils/api-proxy\").APIProxyOptions} APIProxyOptions\n * @typedef {{\n * root: HTMLElement,\n * api: APIProxyOptions,\n *\n * }} DMConfig\n */\n\nimport { APIProxy } from \"../utils/api-proxy\";\nimport { createApp } from \"./app\";\n\nexport class DataManager {\n\n  /** @type {HTMLElement} */\n  root = null;\n\n  /** @type {APIProxy} */\n  api = null;\n\n  /** @type {LabelStudio} */\n  lsf = null;\n\n  /** @type {DataManagerApp} */\n  dataManager = null;\n\n  /**\n   * Constructor\n   * @param {DMConfig} config\n   */\n  constructor(config) {\n    this.root = config.root;\n    this.api = new APIProxy(config.api);\n\n    this.initApp();\n  }\n\n  initApp() {\n    this.dataManager = createApp(this.root, this.api)\n  }\n\n}\n","/** @typedef {{\n * views?: any[]\n * }} AppOptions */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../components/App/App\";\nimport AppStore from \"../stores/AppStore\";\n\n/**\n * Create DM React app\n * @param {HTMLElement} rootNode\n * @param {AppOptions} options\n */\nexport const createApp = (rootNode, options = {}) => {\n  const appStore = AppStore.create({\n    viewsStore: { views: options.views }\n  });\n\n  appStore.tasksStore.setData(options.data)\n\n  appStore._config = options.config;\n  appStore._mode = options.mode || process.env.NODE_ENV;\n\n  window.DM = appStore;\n\n  const component = ReactDOM.render(<App app={appStore} />, rootNode);\n\n  return {appStore, component}\n}\n","// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import App from \"./components/App/App\";\n// import config from './data/config';\n// import data from './data/tasks.json';\n// import views from \"./data/views\";\n// import \"./index.scss\";\n// import AppStore from \"./stores/AppStore\";\n\n\n\n\n// const app = AppStore.create({\n//     viewsStore: {  views: window.LS_VIEWS || views }\n// });\n\n// app.tasksStore.setData(window.LS_DATA || data)\n\n// app._config = window.LS_CONFIG || config;\n// app._mode = window.LS_MODE || 'dev';\n\n// window.DM = app;\n\n// ReactDOM.render(<App app={app} />, document.getElementById(\"app\"));\n\nimport config from './data/config';\nimport data from './data/tasks.json';\nimport views from \"./data/views\";\nimport { DataManager } from './sdk';\n\nconst DM = (config) => {\n    return new DataManager(config);\n}\n\nif (process.env.NODE_ENV === 'development') {\n    DM({\n        root: document.getElementById(\"app\"),\n        config,\n        data,\n        views,\n        api: {\n            gateway: \"/\",\n            endpoints: {\n              tasks: \"/tasks.json\",\n              completion: \"/completions\",\n              cancel: \"/cancel\",\n              projects: \"/projects\",\n              next: \"/next\",\n              expertInstructions: \"/expert_instruction\"\n            },\n        }\n    })\n}\n\nexport { DM as DataManager };\n"],"sourceRoot":""}